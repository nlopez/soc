# Specify the number of Chef client VMs you'd like
client_vm_count = 1

# We'll mount the Chef::Config[:file_cache_path] so it persists between
# Vagrant VMs
host_cache_path = File.expand_path("../.cache", __FILE__)
guest_cache_path = "/tmp/vagrant-cache"

# ensure the cache path exists
FileUtils.mkdir(host_cache_path) unless File.exist?(host_cache_path)

Vagrant.configure("2") do |config|
  config.vm.box = "opscode-ubuntu-12.04"
  config.vm.box_url = "https://opscode-vm.s3.amazonaws.com/vagrant/boxes/opscode-ubuntu-12.04.box"
  config.vm.synced_folder host_cache_path, guest_cache_path
  config.berkshelf.enabled = true
  config.vm.define "chef-server" do |server_config|
    server_config.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--cpus", 1]
      vb.customize ["modifyvm", :id, "--memory", 512]
    end
    server_config.vm.network :private_network, ip: "192.168.168.168"
    server_config.vm.hostname = "chef-server"
    server_config.vm.provision :shell, :inline => "mkdir -p /var/chef/cache" #ugly hack for some reason first run always fails (vagrant provision chef-server fixes) TODO: fixit for realsies
    server_config.vm.provision :chef_solo do |chef|
      chef.provisioning_path = guest_cache_path
      chef.json = {
        "chef-server" => {
          "version" => :latest
        }
      }
      chef.run_list = [
        "recipe[chef-server::default]"
      ]
    end
    server_config.vm.provision :shell, :path => "chef-server.sh"
  end

  (1..client_vm_count).each do |i|
    config.vm.define "chef-client-#{i}" do |client_config|
      client_config.vm.provider "virtualbox" do |vb|
        vb.customize ["modifyvm", :id, "--cpus", 1]
        vb.customize ["modifyvm", :id, "--memory", 512]
      end
      client_config.vm.network :private_network, ip: "192.168.168.#{168+i}"
      client_config.vm.hostname = "chef-client-#{i}"
      client_config.vm.provision :shell, :path => "chef-client.sh"
      client_config.vm.provision :chef_solo do |chef|
        chef.provisioning_path = guest_cache_path
        chef.json = {
          "ohai" => {
            "plugin_path" => "/var/lib/ohai/plugins"
          },
          "chef_client" => {
            "init_style" => "none",
            "config" => {
              "chef_server_url" => "https://192.168.168.168"
            },
            "cron" => {
              "use_cron_d" => true,
              "hour" => "*",
              "minute" => "*/10",
              "log_file" => "/var/log/chef/client.log"
            }
          }
        }
        chef.run_list = [
          "recipe[ohai]",
          "recipe[cron]",
          "recipe[chef-client::config]",
          "recipe[chef-client::cron]"
        ]
      end
      client_config.vm.provision :shell, :inline => "chef-client"
    end
  end
end
